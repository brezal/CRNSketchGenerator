
DECL

	--time horizon
	define MAX_TIME = 2;

	--modes (all modes have an invariant described later)

	boole mode_1;
	boole mode_2;

	--rates

	float [0, 1] k1;
	float [0, 1] k2;
	float [0, 1] k3;
	float [0, 1] k4;

	-- concentrations of species

	float [0, 1] L1;
	float [0, 1] L1p;
	float [0, 1] L2;
	float [0, 1] L2p;
	float [0, 1] L3;
	float [0, 1] L3p;

	-- L3pt = d.L3p / d.time

	float [0, 1] L3pt; 

	-- L3ptt = d.L3pt / d.time
	float [-1, 1] L3ptt;

	--variances

	float [0, 1] CL1;
	float [0, 1] CL1L2;
	float [0, 1] CL1L3;

	float [0, 1] CL1L1p;
	float [0, 1] CL1L2p;
	float [0, 1] CL1L3p;
	float [0, 1] CL1B;

	float [0, 1] CL2;
	float [0, 1] CL2L3;
	float [0, 1] CL2L1p;
	float [0, 1] CL2L2p;
	float [0, 1] CL2L3p;
	float [0, 1] CL2B;


	float [0, 1] CL3;
	float [0, 1] CL3L1p;
	float [0, 1] CL3L2p;
	float [0, 1] CL3L3p;
	float [0, 1] CL3B;

	float [0, 1] CL1p;
	float [0, 1] CL1pL2p;
	float [0, 1] CL1pL3p;
	float [0, 1] CL1pB;

	float [0, 1] CL2p;
	float [0, 1] CL2pL3p;
	float [0, 1] CL2pB;

	float [0, 1] CL3p;
	float [0, 1] CL3pB;

	float [0, 1] CB;

	float [0, 1] B;

	-- time and the time step. the time step is defaulted to the smallest minimum splitting width of undefined

	float [0, MAX_TIME] time;
	float [0, MAX_TIME] delta_time;

INIT
	-- initial concentrations L1, L2, L3 = 0.33
	time = 0; 
	L1 = 0.33;
	L1p = 0;
	L2 = 0.33;
	L2p = 0;
	L3 = 0.33;
	L3p = 0;
	L3pt = 0;
	L3ptt = 0;

	CL1 = 0;
	CL1L2 = 0;
	CL1L3 = 0;
	CL1L1p = 0;
	CL1L2p = 0;
	CL1L3p = 0;
	CL1B = 0;
	CL2 = 0;
	CL2L3 = 0;
	CL2L1p = 0;
	CL2L2p = 0;
	CL2L3p = 0;
	CL2B = 0;

	CL3 = 0;
	CL3L1p = 0;
	CL3L2p = 0;
	CL3L3p = 0;
	CL3B = 0;

	CL1p = 0;
	CL1pL2p = 0;
	CL1pL3p = 0;
	CL1pB = 0;

	CL2p = 0;
	CL2pL3p = 0;
	CL2pB = 0;

	CL3p = 0;
	CL3pB = 0;

	CB = 0;

	B = 0;

	-- cant be in two modes at the same time.
	mode_1 + mode_2 = 1;

TRANS
	-- at each time step we add delta time
	time' = time + delta_time;

	--cant be in two modes at once
	mode_1' + mode_2' = 1;

	--Invariants mode_1: L3ptt >= 0 mode_2: L3ptt <= 0. 

    mode_1 -> (L3pt  >= 0) and (L3ptt >= 0);
    mode_1' -> (L3pt  >= 0) and (L3ptt >= 0);

    mode_2  -> (L3pt > 0) and (L3ptt <= 0);
    mode_2'  -> (L3pt > 0) and (L3ptt <= 0);

  

    --ODEs (flow)

    --rates are constant

    (k1' = k1) and (k2' = k2) and (k3' = k3) and (k4' = k4); 

    -- ODE flow for rates is 0
	mode_1 -> (d.k1   / d.time = 0);
	mode_1 -> (d.k2   / d.time = 0);
    mode_1 -> (d.k3   / d.time = 0);
	mode_1 -> (d.k4   / d.time = 0);

    --ODEs (flow) of species

	mode_1 -> (d.k1 / d.time = 0);
	mode_1 -> (d.k2 / d.time = 0);
	mode_1 -> (d.k3 / d.time = 0);
	mode_1 -> (d.k4 / d.time = 0);
	mode_1 -> (d.L1/ d.time = 100*( L2*L1p*k2 - B*L1*k1));
	mode_1 -> (d.L2/ d.time = 100*( L3*L2p*k3 - L2*L1p*k2));
	mode_1 -> (d.L3/ d.time = 100*( L3p*k4 - L3*L2p*k3));
	mode_1 -> (d.L1p/ d.time = 100*( B*L1*k1 - L2*L1p*k2));
	mode_1 -> (d.L2p/ d.time = 100*(L2*L1p*k2 - L3*L2p*k3));
	mode_1 -> (d.L3p/ d.time = 100*( L3*L2p*k3 - L3p*k4));
	mode_1 -> (d.B/ d.time = 100*( 1));
	mode_1 -> (d.CB/ d.time = 100*( 1));


	--Variances and covariances
	mode_1 -> (d.CL1/ d.time = 100*(B*L1*k1 - 2*B*CL1*k1 - 2*CL1B*L1*k1 + 2*CL1L1p*L2*k2 + 2*CL1L2*L1p*k2 + L2*L1p*k2));
	mode_1 -> (d.CL1L2/ d.time = 100*(CL1L2p*L3*k3 - CL2B*L1*k1 - CL1L1p*L2*k2 - B*CL1L2*k1 + CL2L1p*L2*k2 + CL2*L1p*k2 - CL1L2*L1p*k2 + CL1L3*L2p*k3 - L2*L1p*k2));
	mode_1 -> (d.CL1L3/ d.time = 100*(CL1L3p*k4 - B*CL1L3*k1 - CL3B*L1*k1 - CL1L2p*L3*k3 + CL3L1p*L2*k2 - CL1L3*L2p*k3 + CL2L3*L1p*k2));
	mode_1 -> (d.CL1L1p/ d.time = 100*(B*CL1*k1 - B*CL1L1p*k1 - B*L1*k1 + CL1B*L1*k1 + CL1p*L2*k2 - CL1pB*L1*k1 - CL1L1p*L2*k2 - CL1L2*L1p*k2 + CL2L1p*L1p*k2 - L2*L1p*k2));
	mode_1 -> (d.CL1L2p/ d.time = 100*( CL1L1p*L2*k2 - CL2pB*L1*k1 - B*CL1L2p*k1 - CL1L2p*L3*k3 + CL1pL2p*L2*k2 + CL1L2*L1p*k2 - CL1L3*L2p*k3 + CL2L2p*L1p*k2 + L2*L1p*k2));
	mode_1 -> (d.CL1L3p/ d.time = 100*(CL1L2p*L3*k3 - B*CL1L3p*k1 - CL3pB*L1*k1 - CL1L3p*k4 + CL1pL3p*L2*k2 + CL1L3*L2p*k3 + CL2L3p*L1p*k2));
	mode_1 -> (d.CL1B/ d.time = 100*(CL1pB*L2*k2 - CB*L1*k1 - B*CL1B*k1 + CL2B*L1p*k2));

	mode_1 -> (d.CL2/ d.time = 100*(2*CL2L2p*L3*k3 - 2*CL2L1p*L2*k2 - 2*CL2*L1p*k2 + 2*CL2L3*L2p*k3 + L2*L1p*k2 + L3*L2p*k3));
	mode_1 -> (d.CL2L3/ d.time = 100*( CL2L3p*k4 - CL2L2p*L3*k3 - CL3L1p*L2*k2 + CL3L2p*L3*k3 + CL3*L2p*k3 - CL2L3*L1p*k2 - CL2L3*L2p*k3 - L3*L2p*k3));
	mode_1 -> (d.CL2L1p/ d.time = 100*(B*CL1L2*k1 + CL2B*L1*k1 - CL1p*L2*k2 - CL2L1p*L2*k2 + CL1pL2p*L3*k3 - CL2*L1p*k2 - CL2L1p*L1p*k2 + CL3L1p*L2p*k3 + L2*L1p*k2));
	mode_1 -> (d.CL2L2p/ d.time = 100*(CL2p*L3*k3 + CL2L1p*L2*k2 - CL2L2p*L3*k3 - CL1pL2p*L2*k2 + CL2*L1p*k2 - CL2L3*L2p*k3 - CL2L2p*L1p*k2 + CL3L2p*L2p*k3 - L2*L1p*k2 - L3*L2p*k3));
	mode_1 -> (d.CL2L3p/ d.time = 100*(CL2L2p*L3*k3 - CL2L3p*k4 - CL1pL3p*L2*k2 + CL2pL3p*L3*k3 + CL2L3*L2p*k3 - CL2L3p*L1p*k2 + CL3L3p*L2p*k3 + L3*L2p*k3));
	mode_1 -> (d.CL2B/ d.time = 100*(CL2pB*L3*k3 - CL1pB*L2*k2 - CL2B*L1p*k2 + CL3B*L2p*k3));

	mode_1 -> (d.CL3/ d.time = 100*( 2*CL3L3p*k4 + L3p*k4 - 2*CL3L2p*L3*k3 - 2*CL3*L2p*k3 + L3*L2p*k3));
	mode_1 -> (d.CL3L1p/ d.time = 100*(CL1pL3p*k4 + B*CL1L3*k1 + CL3B*L1*k1 - CL3L1p*L2*k2 - CL1pL2p*L3*k3 - CL2L3*L1p*k2 - CL3L1p*L2p*k3));
	mode_1 -> (d.CL3L2p/ d.time = 100*( CL2pL3p*k4 - CL2p*L3*k3 + CL3L1p*L2*k2 - CL3L2p*L3*k3 - CL3*L2p*k3 + CL2L3*L1p*k2 - CL3L2p*L2p*k3 + L3*L2p*k3));
	mode_1 -> (d.CL3L3p/ d.time = 100*( CL3p*k4 - CL3L3p*k4 - L3p*k4 + CL3L2p*L3*k3 - CL2pL3p*L3*k3 + CL3*L2p*k3 - CL3L3p*L2p*k3 - L3*L2p*k3));
	mode_1 -> (d.CL3B/ d.time = 100*(CL3pB*k4 - CL2pB*L3*k3 - CL3B*L2p*k3));
	mode_1 -> (d.CL1p/ d.time = 100*(2*B*CL1L1p*k1 + B*L1*k1 - 2*CL1p*L2*k2 + 2*CL1pB*L1*k1 - 2*CL2L1p*L1p*k2 + L2*L1p*k2));
	mode_1 -> (d.CL1pL2p/ d.time = 100*( B*CL1L2p*k1 + CL1p*L2*k2 + CL2pB*L1*k1 - CL1pL2p*L2*k2 - CL1pL2p*L3*k3 + CL2L1p*L1p*k2 - CL2L2p*L1p*k2 - CL3L1p*L2p*k3 - L2*L1p*k2));
	mode_1 -> (d.CL1pL3p/ d.time = 100*(B*CL1L3p*k1 - CL1pL3p*k4 + CL3pB*L1*k1 - CL1pL3p*L2*k2 + CL1pL2p*L3*k3 - CL2L3p*L1p*k2 + CL3L1p*L2p*k3));
	mode_1 -> (d.CL1pB/ d.time = 100*(B*CL1B*k1 + CB*L1*k1 - CL1pB*L2*k2 - CL2B*L1p*k2));

	mode_1 -> (d.CL2p/ d.time = 100*(2*CL1pL2p*L2*k2 - 2*CL2p*L3*k3 + 2*CL2L2p*L1p*k2 - 2*CL3L2p*L2p*k3 + L2*L1p*k2 + L3*L2p*k3));
	mode_1 -> (d.CL2pL3p/ d.time = 100*( CL2p*L3*k3 - CL2pL3p*k4 + CL1pL3p*L2*k2 - CL2pL3p*L3*k3 + CL2L3p*L1p*k2 + CL3L2p*L2p*k3 - CL3L3p*L2p*k3 - L3*L2p*k3));
	mode_1 -> (d.CL2pB/ d.time = 100*( CL1pB*L2*k2 - CL2pB*L3*k3 + CL2B*L1p*k2 - CL3B*L2p*k3));

	mode_1 -> (d.CL3p/ d.time = 100*( L3p*k4 - 2*CL3p*k4 + 2*CL2pL3p*L3*k3 + 2*CL3L3p*L2p*k3 + L3*L2p*k3));
	mode_1 -> (d.CL3pB/ d.time = 100*( CL2pB*L3*k3 - CL3pB*k4 + CL3B*L2p*k3));

	mode_1 -> (d.L3pt / d.time = 100*( k3*(L2*L1p*k2 - L3*L2p*k3)*L2p  +  k3*L3*( L3*L2p*k3 - L2*L1p*k2)  - k4*( L3*L2p*k3 - L3p*k4) ));

	mode_1 -> (d.L3ptt/ d.time = 100*((  k3* ( k3*(L2*L1p*k2 - L3*L2p*k3)*L2p  +  k3*L3*( L3*L2p*k3 - L2*L1p*k2)  - k4*( L3*L2p*k3 - L3p*k4) )*L2p + k3*( L3p*k4 - L3*L2p*k3)*(L2*L1p*k2 - L3*L2p*k3) + k3*( L3p*k4 - L3*L2p*k3)*(L2*L1p*k2 - L3*L2p*k3) + k3*L3*(L2*L1p*k2 - L3*L2p*k3)*L1p*k2 + L2*( B*L1*k1 - L2*L1p*k2)*k2 - ( L3p*k4 - L3*L2p*k3)*L2p*k3   - L3*(L2*L1p*k2 - L3*L2p*k3)*k3    ) - k4*( k3*(L2*L1p*k2 - L3*L2p*k3)*L2p  +  k3*L3*( L3*L2p*k3 - L2*L1p*k2)  - k4*( L3*L2p*k3 - L3p*k4) ) )) ;

	--mode_2 when invariants are ment

	mode_2 -> (d.k1 / d.time = 0);
	mode_2 -> (d.k2 / d.time = 0);
	mode_2 -> (d.k3 / d.time = 0);
	mode_2 -> (d.k4 / d.time = 0);
	mode_2 -> (d.L1/ d.time = 100*( L2*L1p*k2 - B*L1*k1));
	mode_2 -> (d.L2/ d.time = 100*( L3*L2p*k3 - L2*L1p*k2));
	mode_2 -> (d.L3/ d.time = 100*( L3p*k4 - L3*L2p*k3));
	mode_2 -> (d.L1p/ d.time = 100*( B*L1*k1 - L2*L1p*k2));
	mode_2 -> (d.L2p/ d.time = 100*(L2*L1p*k2 - L3*L2p*k3));
	mode_2 -> (d.L3p/ d.time = 100*( L3*L2p*k3 - L3p*k4));
	mode_2 -> (d.B/ d.time = 100*( 1));
	mode_2 -> (d.CB/ d.time = 100*( 1));

	mode_2 -> (d.CL1/ d.time = 100*(B*L1*k1 - 2*B*CL1*k1 - 2*CL1B*L1*k1 + 2*CL1L1p*L2*k2 + 2*CL1L2*L1p*k2 + L2*L1p*k2));
	mode_2 -> (d.CL1L2/ d.time = 100*(CL1L2p*L3*k3 - CL2B*L1*k1 - CL1L1p*L2*k2 - B*CL1L2*k1 + CL2L1p*L2*k2 + CL2*L1p*k2 - CL1L2*L1p*k2 + CL1L3*L2p*k3 - L2*L1p*k2));
	mode_2 -> (d.CL1L3/ d.time = 100*(CL1L3p*k4 - B*CL1L3*k1 - CL3B*L1*k1 - CL1L2p*L3*k3 + CL3L1p*L2*k2 - CL1L3*L2p*k3 + CL2L3*L1p*k2));
	mode_2 -> (d.CL1L1p/ d.time = 100*(B*CL1*k1 - B*CL1L1p*k1 - B*L1*k1 + CL1B*L1*k1 + CL1p*L2*k2 - CL1pB*L1*k1 - CL1L1p*L2*k2 - CL1L2*L1p*k2 + CL2L1p*L1p*k2 - L2*L1p*k2));
	mode_2 -> (d.CL1L2p/ d.time = 100*( CL1L1p*L2*k2 - CL2pB*L1*k1 - B*CL1L2p*k1 - CL1L2p*L3*k3 + CL1pL2p*L2*k2 + CL1L2*L1p*k2 - CL1L3*L2p*k3 + CL2L2p*L1p*k2 + L2*L1p*k2));
	mode_2 -> (d.CL1L3p/ d.time = 100*(CL1L2p*L3*k3 - B*CL1L3p*k1 - CL3pB*L1*k1 - CL1L3p*k4 + CL1pL3p*L2*k2 + CL1L3*L2p*k3 + CL2L3p*L1p*k2));
	mode_2 -> (d.CL1B/ d.time = 100*(CL1pB*L2*k2 - CB*L1*k1 - B*CL1B*k1 + CL2B*L1p*k2));

	mode_2 -> (d.CL2/ d.time = 100*(2*CL2L2p*L3*k3 - 2*CL2L1p*L2*k2 - 2*CL2*L1p*k2 + 2*CL2L3*L2p*k3 + L2*L1p*k2 + L3*L2p*k3));
	mode_2 -> (d.CL2L3/ d.time = 100*( CL2L3p*k4 - CL2L2p*L3*k3 - CL3L1p*L2*k2 + CL3L2p*L3*k3 + CL3*L2p*k3 - CL2L3*L1p*k2 - CL2L3*L2p*k3 - L3*L2p*k3));
	mode_2 -> (d.CL2L1p/ d.time = 100*(B*CL1L2*k1 + CL2B*L1*k1 - CL1p*L2*k2 - CL2L1p*L2*k2 + CL1pL2p*L3*k3 - CL2*L1p*k2 - CL2L1p*L1p*k2 + CL3L1p*L2p*k3 + L2*L1p*k2));
	mode_2 -> (d.CL2L2p/ d.time = 100*(CL2p*L3*k3 + CL2L1p*L2*k2 - CL2L2p*L3*k3 - CL1pL2p*L2*k2 + CL2*L1p*k2 - CL2L3*L2p*k3 - CL2L2p*L1p*k2 + CL3L2p*L2p*k3 - L2*L1p*k2 - L3*L2p*k3));
	mode_2 -> (d.CL2L3p/ d.time = 100*(CL2L2p*L3*k3 - CL2L3p*k4 - CL1pL3p*L2*k2 + CL2pL3p*L3*k3 + CL2L3*L2p*k3 - CL2L3p*L1p*k2 + CL3L3p*L2p*k3 + L3*L2p*k3));
	mode_2 -> (d.CL2B/ d.time = 100*(CL2pB*L3*k3 - CL1pB*L2*k2 - CL2B*L1p*k2 + CL3B*L2p*k3));

	mode_2 -> (d.CL3/ d.time = 100*( 2*CL3L3p*k4 + L3p*k4 - 2*CL3L2p*L3*k3 - 2*CL3*L2p*k3 + L3*L2p*k3));
	mode_2 -> (d.CL3L1p/ d.time = 100*(CL1pL3p*k4 + B*CL1L3*k1 + CL3B*L1*k1 - CL3L1p*L2*k2 - CL1pL2p*L3*k3 - CL2L3*L1p*k2 - CL3L1p*L2p*k3));
	mode_2 -> (d.CL3L2p/ d.time = 100*( CL2pL3p*k4 - CL2p*L3*k3 + CL3L1p*L2*k2 - CL3L2p*L3*k3 - CL3*L2p*k3 + CL2L3*L1p*k2 - CL3L2p*L2p*k3 + L3*L2p*k3));
	mode_2 -> (d.CL3L3p/ d.time = 100*( CL3p*k4 - CL3L3p*k4 - L3p*k4 + CL3L2p*L3*k3 - CL2pL3p*L3*k3 + CL3*L2p*k3 - CL3L3p*L2p*k3 - L3*L2p*k3));
	mode_2 -> (d.CL3B/ d.time = 100*(CL3pB*k4 - CL2pB*L3*k3 - CL3B*L2p*k3));
	mode_2 -> (d.CL1p/ d.time = 100*(2*B*CL1L1p*k1 + B*L1*k1 - 2*CL1p*L2*k2 + 2*CL1pB*L1*k1 - 2*CL2L1p*L1p*k2 + L2*L1p*k2));
	mode_2 -> (d.CL1pL2p/ d.time = 100* ( B*CL1L2p*k1 + CL1p*L2*k2 + CL2pB*L1*k1 - CL1pL2p*L2*k2 - CL1pL2p*L3*k3 + CL2L1p*L1p*k2 - CL2L2p*L1p*k2 - CL3L1p*L2p*k3 - L2*L1p*k2));
	mode_2 -> (d.CL1pL3p/ d.time = 100*(B*CL1L3p*k1 - CL1pL3p*k4 + CL3pB*L1*k1 - CL1pL3p*L2*k2 + CL1pL2p*L3*k3 - CL2L3p*L1p*k2 + CL3L1p*L2p*k3));
	mode_2 -> (d.CL1pB/ d.time = 100*(B*CL1B*k1 + CB*L1*k1 - CL1pB*L2*k2 - CL2B*L1p*k2));

	mode_2 -> (d.CL2p/ d.time = 100*(2*CL1pL2p*L2*k2 - 2*CL2p*L3*k3 + 2*CL2L2p*L1p*k2 - 2*CL3L2p*L2p*k3 + L2*L1p*k2 + L3*L2p*k3));
	mode_2 -> (d.CL2pL3p/ d.time = 100*( CL2p*L3*k3 - CL2pL3p*k4 + CL1pL3p*L2*k2 - CL2pL3p*L3*k3 + CL2L3p*L1p*k2 + CL3L2p*L2p*k3 - CL3L3p*L2p*k3 - L3*L2p*k3));
	mode_2 -> (d.CL2pB/ d.time = 100*( CL1pB*L2*k2 - CL2pB*L3*k3 + CL2B*L1p*k2 - CL3B*L2p*k3));

	mode_2 -> (d.CL3p/ d.time = 100*( L3p*k4 - 2*CL3p*k4 + 2*CL2pL3p*L3*k3 + 2*CL3L3p*L2p*k3 + L3*L2p*k3));
	mode_2 -> (d.CL3pB/ d.time = 100*( CL2pB*L3*k3 - CL3pB*k4 + CL3B*L2p*k3));
	mode_2 -> (d.L3pt / d.time = 100*(k3*(L2p*(L3p*k4 - L3*L2p*k3) + L3*(L2*L1p*k2 - L3*L2p*k3)) + k4*(L3p*k4 - L3*L2p*k3)));

	mode_2 -> (d.L3ptt/ d.time = 100*(-k4*(k3*(L2p*(L3p*k4 - L3*L2p*k3) + L3*(L2*L1p*k2 - L3*L2p*k3)) + k4*(L3p*k4 - L3*L2p*k3)) - k3*(L3p*(k3*(L2p*(L3p*k4 - L3*L2p*k3) + L3*(L2*L1p*k2 - L3*L2p*k3)) + k4*(L3p*k4 - L3*L2p*k3)) + L3*(k3*(L2p*(L3p*k4 - L3*L2p*k3) + L3*(L2*L1p*k2 - L3*L2p*k3)) - k2*(L2*(B*L1*k1 - L2*L1p*k2) - L1p*(L2*L1p*k2 - L3*L2p*k3))) - (2*L2*L1p*k2 - 2*L3*L2p*k3)*(L3p*k4 - L3*L2p*k3))));

	mode_2 -> (d.L3pt / d.time = 100*( k3*(L2*L1p*k2 - L3*L2p*k3)*L2p  +  k3*L3*( L3*L2p*k3 - L2*L1p*k2)  - k4*( L3*L2p*k3 - L3p*k4) ));


	mode_2 -> (d.L3ptt/ d.time = 100*( k3* ( k3*(L2*L1p*k2 - L3*L2p*k3)*L2p  +  k3*L3*( L3*L2p*k3 - L2*L1p*k2)  - k4*( L3*L2p*k3 - L3p*k4) )*L2p + k3*( L3p*k4 - L3*L2p*k3)*(L2*L1p*k2 - L3*L2p*k3) + k3*( L3p*k4 - L3*L2p*k3)*(L2*L1p*k2 - L3*L2p*k3) + k3*L3*(L2*L1p*k2 - L3*L2p*k3)*L1p*k2 + L2*( B*L1*k1 - L2*L1p*k2)*k2 - ( L3p*k4 - L3*L2p*k3)*L2p*k3   - L3*(L2*L1p*k2 - L3*L2p*k3)*k3    ) - k4*( k3*(L2*L1p*k2 - L3*L2p*k3)*L2p  +  k3*L3*( L3*L2p*k3 - L2*L1p*k2)  - k4*( L3*L2p*k3 - L3p*k4) )) ;

	-- No state change without time consumption.
	(delta_time = 0) ->  (L1' = L1) and (L2' = L2) and (L3' = L3) and (L1p' = L1p) and (L2p' = L2p) and (L3p' = L3p) and (L3pt' = L3pt) and (L3ptt' = L3ptt) and (CL1' = CL1) and (CL1L2' = CL1L2) and (CL1L3' = CL1L3) and (CL1L1p' = CL1L1p) and (CL1L2p' = CL1L2p) and (CL1L3p' = CL1L3p) and (CL1B' = CL1B) and (CL2' = CL2) and (CL2L3' = CL2L3) and (CL2L1p' = CL2L1p) and (CL2L2p' = CL2L2p) and (CL2L3p' = CL2L3p) and (CL2B' = CL2B) and (CL3' = CL3) and (CL3L1p' = CL3L1p) and (CL3L2p' = CL3L2p) and (CL3L3p' = CL3L3p) and (CL3B' = CL3B) and (CL1p' = CL1p) and (CL1pL2p' = CL1pL2p) and (CL1pL3p' = CL1pL3p) and (CL1pB' = CL1pB) and (CL2p' = CL2p) and (CL2pL3p' = CL2pL3p) and (CL2pB' = CL2pB) and (CL3p' = CL3p) and (CL3pB' = CL3pB) and (CB' = CB);

    --Jump Condition mode_1 and mode_2 next when L3ptt (d.L3pt / d.time = 0) and CL3p <1
    (mode_1 and mode_2') ->  (L3ptt = 0) and (L3p > 0.05) and (CL3p < 1);

TARGET
	-- mode_2 and L3p > 0.2 are the target conditions. Has to be reached before time horizon.

	(time <= 1 and L3p > 0.05) and
	(time < MAX_TIME
	and mode_2
	and k1 > 0
	and k2 > 0
	and k3 > 0
	and k4 > 0
	and ( L3p > 0.1 ));

