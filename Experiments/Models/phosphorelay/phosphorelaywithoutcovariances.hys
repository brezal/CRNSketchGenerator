-- by Max Whitby 2016
DECL
	--Discrete Modes;

	--kATP is used as a clock and is constantly increasing throughout the evolution of the system.
	define kATP = 1;
	define MAX_TIME = 2;

	--two discrete modes with separate invariants described in the DECL section.
	boole mode_1;
	boole mode_2;

	--rate parameters
	float [0, 1] k1;
	float [0, 1] k2;
	float [0, 1] k3;
	float [0, 1] k4;

	--Species declared and their parameter space given

	float [0, 1] ATP;
	float [0, 1] L1;
	float [0, 1] L1p;
	float [0, 1] L2;
	float [0, 1] L2p;
	float [0, 1] L3;
	float [0, 1] L3p;

	-- derivatives. L3pt is d.L3p / d.time and L3ptt is d.L3pt / d.time

	float [0, 1] L3pt; 
	float [-1, 1] L3ptt;

	-- time and the value it changes by. Because delta_time is left undefined it takes default minimum value for a given precision.
	float [0, MAX_TIME] time;
	float [0, MAX_TIME] delta_time;

INIT
	-- initial conditions L1, L2, and L3 initialised to 0.33
	time = 0; 
	ATP = 0;
	L1 = 0.33;
	L1p = 0;
	L2 = 0.33;
	L2p = 0;
	L3 = 0.33;
	L3p = 0;
	L3pt = 0;
	L3ptt = 0;

	mode_1 + mode_2 = 1;

TRANS
	time' = time + delta_time;

	--cant be in two modes at once
	mode_1' + mode_2' = 1;

    --Invariants

    -- L3ptt >= 0 in mode 1 and L3ptt <= 0 in mode_2.

    mode_1 -> (L3pt  >= 0) and (L3ptt >= 0);
    mode_1' -> (L3pt  >= 0) and (L3ptt >= 0);

    mode_2  -> (L3pt > 0) and (L3ptt <= 0);
    mode_2'  -> (L3pt > 0) and (L3ptt <= 0);


    --rates are always constant.
    (k1' = k1) and (k2' = k2) and (k3' = k3) and (k4' = k4); -- (k1 < 0.01) and (k2 < 0.01) and (k3 < 0.01) and (k4 < 0.01);

	mode_1 -> (d.k1   / d.time = 0);
	mode_1 -> (d.k2   / d.time = 0);
    mode_1 -> (d.k3   / d.time = 0);
	mode_1 -> (d.k4   / d.time = 0);


	mode_1 -> (d.ATP  / d.time = kATP);


    --ODEs (flow)  x100 to reflect molecular count mentioned in paper.

	mode_1 -> (d.L1   / d.time = L2*L1p*k2*100 - ATP*L1*k1*100);
	mode_1 -> (d.L1p  / d.time = ATP*L1*k1*100 - L2*L1p*k2*100);
	mode_1 -> (d.L2   / d.time = L3*L2p*k3*100 - L2*L1p*k2*100);
	mode_1 -> (d.L2p  / d.time = L2*L1p*k2*100 - L3*L2p*k3*100);
	mode_1 -> (d.L3   / d.time = L3p*k4*100 - L3*L2p*k3*100);

	mode_1 -> (d.L3p  / d.time = L3*L2p*k3*100 - L3p*k4*100);

	mode_1 -> (d.L3pt / d.time = (k3*100)*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + (L3*100)*(L2*L1p*k2*100 - L3*L2p*k3*100)) + (100*k4)*(L3p*k4*100 - L3*L2p*k3*100));

	mode_1 -> (d.L3ptt/ d.time = (-k4*100)*((100*k3)*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + L3*(L2*L1p*k2*100 - L3*L2p*k3*100)) + (100*k4)*(L3p*k4*100 - L3*L2p*k3*100)) - (k3*100)*(L3p*((k3*100)*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + L3*(L2*L1p*k2*100 - L3*L2p*k3*100)) + k4*100*(L3p*k4*100 - L3*L2p*k3*100)) + L3*(100*k3*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + L3*(L2*L1p*k2*100 - L3*L2p*k3*100)) - k2*100*(L2*(ATP*L1*k1*100 - L2*L1p*k2*100) - L1p*(L2*L1p*k2*100 - L3*L2p*k3*100))) - (2*L2*L1p*k2*100 - 2*L3*L2p*k3*100)*(L3p*k4*100 - L3*L2p*k3*100)));

	--same flow for mode 2 but different invariant.

	mode_2 -> (d.k1   / d.time = 0);
	mode_2 -> (d.k2   / d.time = 0);
    mode_2 -> (d.k3   / d.time = 0);
	mode_2 -> (d.k4   / d.time = 0);

	mode_2 -> (d.ATP  / d.time = kATP);

	mode_2 -> (d.L1   / d.time = L2*L1p*k2*100 - ATP*L1*k1*100);
	mode_2 -> (d.L1p  / d.time = ATP*L1*k1*100 - L2*L1p*k2*100);
	mode_2 -> (d.L2   / d.time = L3*L2p*k3*100 - L2*L1p*k2*100);
	mode_2 -> (d.L2p  / d.time = L2*L1p*k2*100 - L3*L2p*k3*100);
	mode_2 -> (d.L3   / d.time = L3p*k4*100 - L3*L2p*k3*100);
	mode_2 -> (d.L3p  / d.time = L3*L2p*k3*100 - L3p*k4*100);

	mode_2 -> (d.L3pt / d.time = (k3*100)*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + (L3*100)*(L2*L1p*k2*100 - L3*L2p*k3*100)) + (100*k4)*(L3p*k4*100 - L3*L2p*k3*100));

	mode_2 -> (d.L3ptt/ d.time = (-k4*100)*((100*k3)*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + L3*(L2*L1p*k2*100 - L3*L2p*k3*100)) + (100*k4)*(L3p*k4*100 - L3*L2p*k3*100)) - (k3*100)*(L3p*((k3*100)*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + L3*(L2*L1p*k2*100 - L3*L2p*k3*100)) + k4*100*(L3p*k4*100 - L3*L2p*k3*100)) + L3*(100*k3*(L2p*(L3p*k4*100 - L3*L2p*k3*100) + L3*(L2*L1p*k2*100 - L3*L2p*k3*100)) - k2*100*(L2*(ATP*L1*k1*100 - L2*L1p*k2*100) - L1p*(L2*L1p*k2*100 - L3*L2p*k3*100))) - (2*L2*L1p*k2*100 - 2*L3*L2p*k3*100)*(L3p*k4*100 - L3*L2p*k3*100)));

	-- No state change without time consumption.
	(delta_time = 0) -> (k1' = k1) and (k2' = k2) and (k3' = k3) and (k4' = k4) and (ATP' = ATP) and (L1' = L1) and (L2' = L2) and (L3' = L3) and (L1p' = L1p) and (L2p' = L2p) and (L3p' = L3p) and (L3pt' = L3pt) and (L3ptt' = L3ptt);

  --Jump Condition. 2nd derivative = 0.

    (mode_1 and mode_2') ->  (L3ptt = 0) and (L3p > 0);

TARGET
	-- has to end on L3p > 0.6

	(time = 1 and L3p > 0.3) and
	(time < MAX_TIME
	and mode_2
	and ( L3p > 0.6 ));
